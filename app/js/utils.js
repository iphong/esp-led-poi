/******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};
/******/
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/
/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId]) {
/******/ 			return installedModules[moduleId].exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			i: moduleId,
/******/ 			l: false,
/******/ 			exports: {}
/******/ 		};
/******/
/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);
/******/
/******/ 		// Flag the module as loaded
/******/ 		module.l = true;
/******/
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/
/******/
/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;
/******/
/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;
/******/
/******/ 	// define getter function for harmony exports
/******/ 	__webpack_require__.d = function(exports, name, getter) {
/******/ 		if(!__webpack_require__.o(exports, name)) {
/******/ 			Object.defineProperty(exports, name, { enumerable: true, get: getter });
/******/ 		}
/******/ 	};
/******/
/******/ 	// define __esModule on exports
/******/ 	__webpack_require__.r = function(exports) {
/******/ 		if(typeof Symbol !== 'undefined' && Symbol.toStringTag) {
/******/ 			Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });
/******/ 		}
/******/ 		Object.defineProperty(exports, '__esModule', { value: true });
/******/ 	};
/******/
/******/ 	// create a fake namespace object
/******/ 	// mode & 1: value is a module id, require it
/******/ 	// mode & 2: merge all properties of value into the ns
/******/ 	// mode & 4: return value when already ns object
/******/ 	// mode & 8|1: behave like require
/******/ 	__webpack_require__.t = function(value, mode) {
/******/ 		if(mode & 1) value = __webpack_require__(value);
/******/ 		if(mode & 8) return value;
/******/ 		if((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;
/******/ 		var ns = Object.create(null);
/******/ 		__webpack_require__.r(ns);
/******/ 		Object.defineProperty(ns, 'default', { enumerable: true, value: value });
/******/ 		if(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));
/******/ 		return ns;
/******/ 	};
/******/
/******/ 	// getDefaultExport function for compatibility with non-harmony modules
/******/ 	__webpack_require__.n = function(module) {
/******/ 		var getter = module && module.__esModule ?
/******/ 			function getDefault() { return module['default']; } :
/******/ 			function getModuleExports() { return module; };
/******/ 		__webpack_require__.d(getter, 'a', getter);
/******/ 		return getter;
/******/ 	};
/******/
/******/ 	// Object.prototype.hasOwnProperty.call
/******/ 	__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };
/******/
/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "./js/";
/******/
/******/
/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(__webpack_require__.s = "./ts/utils.ts");
/******/ })
/************************************************************************/
/******/ ({

/***/ "./ts/utils.ts":
/*!*********************!*\
  !*** ./ts/utils.ts ***!
  \*********************/
/*! no static exports found */
/***/ (function(module, exports) {

const $txt = document.getElementById('txt');
const $hex = document.getElementById('hex');
const $dec = document.getElementById('dec');
const $bin = document.getElementById('bin');
const $int = document.getElementById('int');
const $res = document.getElementById('res');
const $array = document.getElementById('arr');
const $message = document.getElementById('message');
const $send = document.getElementById('send');
chrome.storage.local.get('utils_txt', ({ utils_txt: codes }) => {
    if (!codes)
        return;
    $bin.innerHTML = codes.map(c => c.toString(2).toUpperCase().padStart(8, '0')).join(' ');
    $hex.innerHTML = codes.map(c => c.toString(16).toUpperCase().padStart(2, '0')).join(' ');
    $dec.innerHTML = codes.map(c => c.toString()).join(' ');
    $txt.innerHTML = codes.map(c => String.fromCharCode(c)).join('');
    $array.innerHTML = codes.map(c => '0x' + c.toString(16).toUpperCase().padStart(2, '0')).join(', ');
});
let codes = [];
addEventListener('input', (e) => {
    let value = e.target.innerText.replace(/\s+/, '');
    switch (e.target.id) {
        case 'txt':
            codes = value ? value.split('').map(c => c.charCodeAt(0)) : [];
            $bin.innerHTML = codes.map(c => c.toString(2).toUpperCase().padStart(8, '0')).join(' ');
            $hex.innerHTML = codes.map(c => c.toString(16).toUpperCase().padStart(2, '0')).join(' ');
            $dec.innerHTML = codes.map(c => c.toString()).join(' ');
            $array.innerHTML = codes.map(c => '0x' + c.toString(16).toUpperCase().padStart(2, '0')).join(', ');
            break;
        case 'hex':
            value = e.target.innerText.replace(/[^0-9a-f ]/ig, '').trim();
            codes = value ? value.split(' ').map(c => parseInt(c, 16)) : [];
            $bin.innerHTML = codes.map(c => c.toString(2).toUpperCase().padStart(8, '0')).join(' ');
            $dec.innerHTML = codes.map(c => c.toString()).join(' ');
            $txt.innerHTML = codes.map(c => String.fromCharCode(c)).join('');
            $array.innerHTML = codes.map(c => '0x' + c.toString(16).toUpperCase().padStart(2, '0')).join(', ');
            break;
        case 'dec':
            value = e.target.innerText.replace(/[^0-9 ]/ig, '').trim();
            codes = value ? value.split(' ').map(c => parseInt(c, 10)) : [];
            $bin.innerHTML = codes.map(c => c.toString(2).toUpperCase().padStart(8, '0')).join(' ');
            $hex.innerHTML = codes.map(c => c.toString(16).toUpperCase().padStart(2, '0')).join(' ');
            $txt.innerHTML = codes.map(c => String.fromCharCode(c)).join('');
            $array.innerHTML = codes.map(c => '0x' + c.toString(16).toUpperCase().padStart(2, '0')).join(', ');
            break;
        case 'bin':
            value = e.target.innerText.replace(/[^01 ]/ig, '').trim();
            codes = value ? value.split(' ').map(c => parseInt(c, 2)) : [];
            $hex.innerHTML = codes.map(c => c.toString(16).toUpperCase().padStart(2, '0')).join(' ');
            $dec.innerHTML = codes.map(c => c.toString()).join(' ');
            $txt.innerHTML = codes.map(c => String.fromCharCode(c)).join('');
            $array.innerHTML = codes.map(c => '0x' + c.toString(16).toUpperCase().padStart(2, '0')).join(', ');
            break;
        case 'int':
            let res = '\n';
            value = e.target.innerText.replace(/[^0-9]/ig, '').trim();
            if (value) {
                const num = parseFloat(value);
                const buf = new Uint8Array(4);
                const view = new DataView(buf.buffer);
                view.setUint16(0, num);
                res += 'U16 BE = ' + toHEX(buf.slice(0, 2));
                view.setUint16(0, num, true);
                res += 'U16 LE = ' + toHEX(buf.slice(0, 2));
                view.setUint32(0, num);
                res += 'U32 BE = ' + toHEX(buf);
                view.setUint32(0, num, true);
                res += 'U32 LE = ' + toHEX(buf);
                view.setFloat32(0, num);
                res += 'F32 BE = ' + toHEX(buf);
                view.setFloat32(0, num, true);
                res += 'F32 LE = ' + toHEX(buf);
            }
            $res.innerHTML = res;
            break;
        default: return;
    }
    chrome.storage.local.set({ 'utils_txt': codes });
});
function toHEX(bytes) {
    return [...bytes].map(c => c.toString(16).toUpperCase().padStart(2, '0')).join(' ') + '\n';
}
$send.addEventListener('click', e => {
    chrome['app'].window.get('app').contentWindow.postMessage(new Uint8Array([1, ...codes]));
});


/***/ })

/******/ });
//# sourceMappingURL=data:application/json;charset=utf-8;base64,