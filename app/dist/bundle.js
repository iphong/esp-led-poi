/******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};
/******/
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/
/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId]) {
/******/ 			return installedModules[moduleId].exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			i: moduleId,
/******/ 			l: false,
/******/ 			exports: {}
/******/ 		};
/******/
/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);
/******/
/******/ 		// Flag the module as loaded
/******/ 		module.l = true;
/******/
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/
/******/
/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;
/******/
/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;
/******/
/******/ 	// define getter function for harmony exports
/******/ 	__webpack_require__.d = function(exports, name, getter) {
/******/ 		if(!__webpack_require__.o(exports, name)) {
/******/ 			Object.defineProperty(exports, name, { enumerable: true, get: getter });
/******/ 		}
/******/ 	};
/******/
/******/ 	// define __esModule on exports
/******/ 	__webpack_require__.r = function(exports) {
/******/ 		if(typeof Symbol !== 'undefined' && Symbol.toStringTag) {
/******/ 			Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });
/******/ 		}
/******/ 		Object.defineProperty(exports, '__esModule', { value: true });
/******/ 	};
/******/
/******/ 	// create a fake namespace object
/******/ 	// mode & 1: value is a module id, require it
/******/ 	// mode & 2: merge all properties of value into the ns
/******/ 	// mode & 4: return value when already ns object
/******/ 	// mode & 8|1: behave like require
/******/ 	__webpack_require__.t = function(value, mode) {
/******/ 		if(mode & 1) value = __webpack_require__(value);
/******/ 		if(mode & 8) return value;
/******/ 		if((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;
/******/ 		var ns = Object.create(null);
/******/ 		__webpack_require__.r(ns);
/******/ 		Object.defineProperty(ns, 'default', { enumerable: true, value: value });
/******/ 		if(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));
/******/ 		return ns;
/******/ 	};
/******/
/******/ 	// getDefaultExport function for compatibility with non-harmony modules
/******/ 	__webpack_require__.n = function(module) {
/******/ 		var getter = module && module.__esModule ?
/******/ 			function getDefault() { return module['default']; } :
/******/ 			function getModuleExports() { return module; };
/******/ 		__webpack_require__.d(getter, 'a', getter);
/******/ 		return getter;
/******/ 	};
/******/
/******/ 	// Object.prototype.hasOwnProperty.call
/******/ 	__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };
/******/
/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "";
/******/
/******/
/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(__webpack_require__.s = "./app/js/index.js");
/******/ })
/************************************************************************/
/******/ ({

/***/ "./app/js/api.js":
/*!***********************!*\
  !*** ./app/js/api.js ***!
  \***********************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

eval("/* WEBPACK VAR INJECTION */(function(global) {global.request = function request(method = 'POST', path = '', args = {}, body = null) {\n  return new Promise((resolve, reject) => {\n    const req = new XMLHttpRequest();\n    const params = Object.entries(args);\n    const uri = path + (params.length ? '?' + params.map(([key, value]) => `${key}=${value}`).join('&') : '');\n    console[method === 'DELETE' ? 'error' : method === 'POST' ? 'info' : 'log'](`${method} `);\n    console.append(uri);\n    console.append(body ? ` [${body.size || body.length} Kb]` : '');\n    console.append(` ... `);\n    req.open(method, uri, true);\n    req.send(body);\n    req.addEventListener('loadend', () => {\n      console.append(req.status, req.statusText);\n\n      if (req.status === 200) {\n        if (req.getResponseHeader('Content-Type') === 'application/json') {\n          resolve(JSON.parse(req.responseText));\n        } else resolve(req.responseText);\n      } else {\n        reject();\n      }\n    });\n    req.addEventListener('error', reject);\n  });\n};\n\nglobal.uploadFile = function uploadFile(path, file, sync = true, target = null) {\n  if (typeof file === 'string') file = new Blob([file]);\n  console.warn(`UPLOAD ${path} [${(file.size / 1000).toFixed(2)} KB] ... `);\n  return new Promise((resolve, reject) => {\n    const form = new FormData();\n    const req = new XMLHttpRequest();\n    form.append('filename', path);\n    form.append('file', file);\n    req.open('POST', `edit?${sync ? 'sync' : 'nosync'}&${target ? `target=${target}` : ''}`, true);\n    req.send(form);\n\n    req.onloadend = e => {\n      console.append(req.status, req.statusText);\n\n      if (req.status === 200) {\n        resolve(req);\n      } else {\n        reject(req);\n      }\n    };\n  });\n};\n\nglobal.get = function get(path, params) {\n  return request('GET', path, params);\n};\n\nglobal.post = function post(path, params, body) {\n  return request('POST', path, params, body);\n};\n\nglobal.sendCommand = function sendCommand(command) {\n  // console.log('execute ' + command)\n  return request('POST', '/command', {\n    command\n  });\n};\n\nglobal.loadAudioConfig = function loadAudioConfig() {\n  return get(`show/${CONFIG.show}.json`).then(res => {\n    Object.assign(AUDIO, res);\n    renderAudio();\n  });\n};\n\nwindow.loadShowData = function loadShowData() {\n  return Promise.resolve().then(() => {\n    return get(`show/${CONFIG.show}A.lsb`).then(A => renderShowTimeline('#timeline1', A)).catch(e => $('#timeline1')[0].innerHTML = '');\n  }).then(() => {\n    return get(`show/${CONFIG.show}B.lsb`).then(B => renderShowTimeline('#timeline2', B)).catch(e => $('#timeline2')[0].innerHTML = '');\n  });\n};\n\nlet fetchTime = Date.now();\n\nglobal.fetchData = function fetchData() {\n  fetchTime = Date.now();\n\n  const next = () => setTimeout(fetchData, 5000 - (Date.now() - fetchTime)); // load hardware configs data\n\n\n  get('/status').then(res => {\n    Object.assign(CONFIG, res);\n    renderShow();\n    get('/color').then(res2 => {\n      CONFIG.a = {\n        r: res2.a[0],\n        g: res2.a[1],\n        b: res2.a[2]\n      };\n      CONFIG.b = {\n        r: res2.b[0],\n        g: res2.b[1],\n        b: res2.b[2]\n      };\n      color.rgb = CONFIG[CONFIG.segment];\n      updateHSL();\n      renderColor();\n      if (CONFIG.show) loadShowData().then(next);else next();\n    });\n  });\n};\n\nglobal.stopShow = function stopShow() {\n  return sendCommand('end').then(() => {\n    call('#player', 'pause');\n    setProp('#player', 'currentTime', 0);\n  });\n};\n\nglobal.startShow = function startShow() {\n  return sendCommand('start').then(() => {\n    setProp('#player', 'currentTime', 0);\n    return call('#player', 'play');\n  });\n};\n\nglobal.resetShow = function resetShow() {\n  console.log(`reset show #${CONFIG.show}`);\n  AUDIO = Object.assign({}, AUDIO_DEFAULT);\n  AUDIO.id = CONFIG.show;\n  SHOWS.length = 0;\n  render();\n  return stopShow().then(clearLightShow);\n};\n\nglobal.saveShow = function saveShow() {\n  return stopShow().then(saveAudioConfig).then(saveLightShow).then(startShow);\n};\n/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(/*! ./../../node_modules/webpack/buildin/global.js */ \"./node_modules/webpack/buildin/global.js\")))\n\n//# sourceURL=webpack:///./app/js/api.js?");

/***/ }),

/***/ "./app/js/app.js":
/*!***********************!*\
  !*** ./app/js/app.js ***!
  \***********************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

eval("/* WEBPACK VAR INJECTION */(function(global) {global.$ = function $(selector) {\n  return document.body.querySelectorAll(selector);\n};\n\nglobal.setText = function setText(selector, text) {\n  if (typeof text === 'undefined') return;\n  $(selector).forEach(el => {\n    el.innerText = text;\n  });\n};\n\nglobal.setValue = function setValue(selector, value) {\n  if (typeof value === 'undefined') return;\n  $(selector).forEach(el => {\n    el.value = value;\n  });\n};\n\nglobal.setProp = function setProp(selector, prop, value) {\n  if (typeof value === 'undefined') return;\n  $(selector).forEach(el => {\n    el[prop] = value;\n  });\n};\n\nglobal.setAttr = function setAttr(selector, attr, value) {\n  if (typeof value === 'undefined') return;\n  $(selector).forEach(el => {\n    el.setAttribute(attr, value);\n  });\n};\n\nglobal.click = function click(selector) {\n  $(selector).forEach(el => {\n    el.click();\n  });\n};\n\nglobal.call = function call(selector, method, ...args) {\n  $(selector).forEach(el => {\n    if (typeof el[method] === 'function') {\n      el[method].call(el, ...args);\n    }\n  });\n}; // render rgb and hsl color input sliders\n\n\nglobal.renderColor = function renderColor() {\n  Object.keys(color).forEach(group => {\n    Object.keys(color[group]).forEach(channel => {\n      const el = document.querySelector(`input[data-group=\"${group}\"][data-key=\"${channel}\"]`);\n\n      if (el) {\n        el.value = color[group][channel];\n        const span = el.parentElement.querySelector('span');\n\n        if (span) {\n          switch (group) {\n            case 'hsl':\n              span.innerText = Math.round(color[group][channel] * 100) + '%';\n              break;\n\n            case 'rgb':\n              span.innerText = el.value;\n          }\n        }\n      }\n    });\n  });\n}; // render ui components bound to current show\n\n\nglobal.renderShow = function renderShow() {\n  $('[data-segment]').forEach(el => {\n    if (el.dataset.segment === CONFIG.segment) {\n      el.classList.add('selected');\n    } else {\n      el.classList.remove('selected');\n    }\n  });\n  $('[data-show]').forEach(el => {\n    if (parseInt(el.dataset.show) === CONFIG.show) {\n      el.classList.add('selected');\n    } else {\n      el.classList.remove('selected');\n    }\n  });\n  $('section.tab').forEach(el => {\n    if (parseInt(el.dataset.tab) === 1 && !CONFIG.show) {\n      el.classList.add('active');\n    } else if (parseInt(el.dataset.tab) === 2 && CONFIG.show) {\n      el.classList.add('active');\n    } else {\n      el.classList.remove('active');\n    }\n  });\n};\n\nglobal.renderShowTimeline = function renderShowTimeline(selector, content) {\n  $(selector).forEach(wrapper => {\n    wrapper.innerHTML = '';\n    let lastColor = `rgb(0,0,0)`;\n    content.split('\\n').forEach(line => {\n      if (line.trim().startsWith('C')) {\n        const [, start, duration, transition, r, g, b] = line.trim().split(' ');\n        const color = `rgb(${r},${g},${b})`;\n        const percent = Math.round(transition / duration * 100);\n        const frame = document.createElement('span');\n        frame.classList.add('frame');\n        frame.style.width = `${Math.round(parseInt(duration) / 10)}px`;\n        frame.style.background = `linear-gradient(90deg, ${lastColor}0px, ${color} ${Math.round(transition / 10)}px, ${color} ${Math.round(duration / 10)}px)`;\n        wrapper.appendChild(frame);\n        lastColor = color;\n      }\n    });\n  });\n};\n\nglobal.renderAudio = function renderAudio() {\n  setAttr('#player', 'src', AUDIO.url);\n  setText('#audio-filename', AUDIO.filename);\n  setText('#audio-duration', Math.round(AUDIO.duration));\n  setText('#audio-tempo', AUDIO.tempo);\n  setText('#audio-beats', AUDIO.beats);\n  setValue('#audio-color1', AUDIO.color1);\n  setValue('#audio-color2', AUDIO.color2);\n  setValue('#audio-ratio', AUDIO.ratio);\n};\n\nglobal.render = function render() {\n  renderShow();\n  renderColor(); // renderAudio()\n};\n/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(/*! ./../../node_modules/webpack/buildin/global.js */ \"./node_modules/webpack/buildin/global.js\")))\n\n//# sourceURL=webpack:///./app/js/app.js?");

/***/ }),

/***/ "./app/js/audio.js":
/*!*************************!*\
  !*** ./app/js/audio.js ***!
  \*************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

eval("/* WEBPACK VAR INJECTION */(function(global) {const AudioContext = window['AudioContext'] || window['webkitAudioContext'];\nlet ab;\n\nglobal.getWaveformData = function getWaveformData(audio) {\n  const data = audio.getChannelData(0);\n  const size = audio.sampleRate / 10;\n  const total = audio.duration * 10;\n  const array = new Int8Array(total * 2);\n\n  for (let i = 0; i < total; i++) {\n    let min = 1,\n        max = -1;\n    const offset = i * size;\n\n    for (let a = 0; a < size; a++) {\n      min = Math.min(min, data[offset + a]);\n      max = Math.max(max, data[offset + a]);\n    }\n\n    array[offset * 2] = min * 127;\n    array[offset * 2 + 1] = max * 127;\n  }\n};\n\nglobal.parseAudio = function parseAudio(file) {\n  AUDIO.filename = file.name;\n  renderAudio();\n  return new Promise(resolve => {\n    const ctx = new AudioContext();\n    const reader = new FileReader();\n    reader.readAsArrayBuffer(file);\n    reader.addEventListener('loadend', e => {\n      console.debug(`decoding ${file.type}...`);\n\n      const handle = audio => {\n        // getWaveformData(audio)\n        console.append('OK');\n        Object.assign(AUDIO, {\n          id: CONFIG.show,\n          url: URL.createObjectURL(file),\n          filename: file.name,\n          duration: Math.round(audio.duration * 1000) / 1000,\n          sampleRate: audio.sampleRate,\n          tempo: 0,\n          beats: 0,\n          channels: []\n        });\n\n        for (let i = 0; i < audio.numberOfChannels; i++) {\n          const {\n            tempo,\n            beats\n          } = new MusicTempo(audio.getChannelData(i));\n          beats.forEach((t, i, b) => {\n            b[i] = Math.round(t * 1000);\n          });\n          AUDIO.channels[i] = {\n            tempo,\n            beats,\n            delay: beats[0],\n            end: beats[beats.length - 1]\n          };\n          AUDIO.tempo += parseInt(tempo);\n          AUDIO.beats += beats.length;\n          console.info(`-- @${i + 1}: ${beats.length} beats, TEMPO: ${tempo} BPM`);\n        }\n\n        AUDIO.tempo /= audio.numberOfChannels;\n        AUDIO.beats /= audio.numberOfChannels;\n        renderAudio();\n        saveAudioConfig().then(resolve);\n      };\n\n      if ('chrome' in window) {\n        ctx.decodeAudioData(reader.result).catch(handleError).then(handle);\n      } else {\n        ctx.decodeAudioData(reader.result, handle, handleError);\n      }\n    });\n  });\n};\n\nglobal.saveAudioConfig = function saveAudioConfig(id = CONFIG.show, data = AUDIO) {\n  return uploadFile(`/show/${id}.json`, JSON.stringify(AUDIO));\n};\n\nglobal.loadAudioConfig = function loadAudioConfig(id = CONFIG.show, data = AUDIO) {\n  return get(`show/${id}.json`).then(res => {\n    Object.assign(data, res);\n    renderAudio();\n  }).catch(() => {\n    Object.assign(data, AUDIO_DEFAULT);\n    renderAudio();\n  });\n};\n\nglobal.saveLightShow = function saveLightShow(id = CONFIG.show, data = AUDIO) {\n  return new Promise(resolve => {\n    // SHOWS[0] = createLoop(0, AUDIO.channels[0], AUDIO.tempo)\n    // SHOWS[1] = createLoop(1, AUDIO.channels[1], AUDIO.tempo)\n    SHOWS[0] = createSequenceFromBeats(AUDIO.channels[0].beats, 0);\n    SHOWS[1] = createSequenceFromBeats(AUDIO.channels[1].beats, 1);\n    return uploadFile(`/show/${CONFIG.show}A.lsb`, SHOWS[0]).then(() => uploadFile(`/show/${CONFIG.show}B.lsb`, SHOWS[1])).then(() => resolve(SHOWS));\n  });\n};\n\nglobal.clearLightShow = function clearLightShow(id = CONFIG.show, data = AUDIO) {\n  return new Promise(resolve => {\n    return request('DELETE', `show/${CONFIG.show}.json`).then(() => request('DELETE', `/show/${CONFIG.show}A.lsb`)).then(() => request('DELETE', `/show/${CONFIG.show}B.lsb`)).then(resolve);\n  });\n};\n\nglobal.createLoop = function createLoop(index, channel, tempo) {\n  const delay = channel.delay;\n  const end = channel.end;\n  const dur = Math.ceil(1000 / (tempo / 60));\n  const dur1 = Math.round(dur * AUDIO.ratio);\n  const dur2 = dur - dur1;\n  const fade1 = Math.round(dur1 * 1);\n  const fade2 = Math.round(dur2 * 1);\n  let color1 = hexToIntString(AUDIO.color1);\n  let color2 = hexToIntString(AUDIO.color2);\n\n  if (AUDIO.swap && index % 2) {\n    color1 = hexToIntString(AUDIO.color2);\n    color2 = hexToIntString(AUDIO.color1);\n  }\n\n  return [`C 0 ${delay} 0 0 0 0`, `L ${delay} ${end - delay}`, `\tC 0 ${dur1} ${fade1} ${color1}`, `\tC ${dur1} ${dur2} ${fade2} ${color2}`, `\tE ${dur}`, `E ${end}`].join('\\n');\n};\n\nglobal.createSequenceFromBeats = function createSequenceFromBeats(beats, channel = 0) {\n  let seq = `C 0 ${beats[0]} 0 0 0 0\\n`;\n  seq += beats.map((time, index) => {\n    if (index + 1 < beats.length) {\n      const start = Math.round(time);\n      const dur = Math.round(beats[index + 1] - time);\n      const dur1 = Math.round(dur * AUDIO.ratio);\n      const dur2 = dur - dur1;\n      const fade1 = Math.round(dur1 * 1);\n      const fade2 = Math.round(dur2 * 1);\n      let color1 = hexToIntString(AUDIO.color1);\n      let color2 = hexToIntString(AUDIO.color2);\n\n      if (AUDIO.swap && channel % 2) {\n        return [`C ${start} ${dur1} ${fade1} ${color2}`, `C ${start + dur1} ${dur2} ${fade2} ${color1}`].join('\\n');\n      } else {\n        return [`C ${start} ${dur1} ${fade1} ${color1}`, `C ${start + dur1} ${dur2} ${fade2} ${color2}`].join('\\n');\n      }\n    }\n  }).join('\\n');\n  seq += `E ${beats[beats.length - 1]}`;\n  return seq;\n};\n\nglobal.hexToIntString = function hexToIntString(hex) {\n  hex = hex.replace(/[^0-9a-f]+/gi, '');\n  return [parseInt(hex.slice(0, 2), 16), parseInt(hex.slice(2, 4), 16), parseInt(hex.slice(4, 6), 16)].join(' ');\n};\n/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(/*! ./../../node_modules/webpack/buildin/global.js */ \"./node_modules/webpack/buildin/global.js\")))\n\n//# sourceURL=webpack:///./app/js/audio.js?");

/***/ }),

/***/ "./app/js/color.js":
/*!*************************!*\
  !*** ./app/js/color.js ***!
  \*************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

eval("/* WEBPACK VAR INJECTION */(function(global) {/**\n * Converts an RGB color value to HSL. Conversion formula\n * adapted from http://en.wikipedia.org/wiki/HSL_color_space.\n * Assumes r, g, and b are contained in the set [0, 255] and\n * returns h, s, and l in the set [0, 1].\n *\n * @return  Array           The HSL representation\n * @param r Number\n * @param g Number\n * @param b Number\n */\nglobal.rgbToHsl = function rgbToHsl(r, g, b) {\n  r /= 255;\n  g /= 255;\n  b /= 255;\n  let max = Math.max(r, g, b),\n      min = Math.min(r, g, b);\n  let h,\n      s,\n      l = (max + min) / 2;\n\n  if (max === min) {\n    h = s = 0; // achromatic\n  } else {\n    let d = max - min;\n    s = l > 0.5 ? d / (2 - max - min) : d / (max + min);\n\n    switch (max) {\n      case r:\n        h = (g - b) / d + (g < b ? 6 : 0);\n        break;\n\n      case g:\n        h = (b - r) / d + 2;\n        break;\n\n      case b:\n        h = (r - g) / d + 4;\n        break;\n    }\n\n    h /= 6;\n  }\n\n  return {\n    h,\n    s,\n    l\n  };\n};\n/**\n * Converts an HSL color value to RGB. Conversion formula\n * adapted from http://en.wikipedia.org/wiki/HSL_color_space.\n * Assumes h, s, and l are contained in the set [0, 1] and\n * returns r, g, and b in the set [0, 255].\n *\n * @return  Object           The RGB representation\n * @param h\n * @param s\n * @param l\n */\n\n\nglobal.hslToRgb = function hslToRgb(h, s, l) {\n  let r, g, b;\n\n  if (s === 0) {\n    r = g = b = l; // achromatic\n  } else {\n    global.hue2rgb = function hue2rgb(p, q, t) {\n      if (t < 0) t += 1;\n      if (t > 1) t -= 1;\n      if (t < 1 / 6) return p + (q - p) * 6 * t;\n      if (t < 1 / 2) return q;\n      if (t < 2 / 3) return p + (q - p) * (2 / 3 - t) * 6;\n      return p;\n    };\n\n    let q = l < 0.5 ? l * (1 + s) : l + s - l * s;\n    let p = 2 * l - q;\n    r = hue2rgb(p, q, h + 1 / 3);\n    g = hue2rgb(p, q, h);\n    b = hue2rgb(p, q, h - 1 / 3);\n  }\n\n  return {\n    r: r * 255,\n    g: g * 255,\n    b: b * 255\n  };\n};\n/**\n * Converts an RGB color value to HSV. Conversion formula\n * adapted from http://en.wikipedia.org/wiki/HSV_color_space.\n * Assumes r, g, and b are contained in the set [0, 255] and\n * returns h, s, and v in the set [0, 1].\n *\n * @return  Array           The HSV representation\n * @param r\n * @param g\n * @param b\n */\n\n\nglobal.rgbToHsv = function rgbToHsv(r, g, b) {\n  r /= 255, g /= 255, b /= 255;\n  let max = Math.max(r, g, b),\n      min = Math.min(r, g, b);\n  let h,\n      s,\n      v = max;\n  let d = max - min;\n  s = max === 0 ? 0 : d / max;\n\n  if (max === min) {\n    h = 0; // achromatic\n  } else {\n    switch (max) {\n      case r:\n        h = (g - b) / d + (g < b ? 6 : 0);\n        break;\n\n      case g:\n        h = (b - r) / d + 2;\n        break;\n\n      case b:\n        h = (r - g) / d + 4;\n        break;\n    }\n\n    h /= 6;\n  }\n\n  return {\n    h,\n    s,\n    v\n  };\n};\n/**\n * Converts an HSV color value to RGB. Conversion formula\n * adapted from http://en.wikipedia.org/wiki/HSV_color_space.\n * Assumes h, s, and v are contained in the set [0, 1] and\n * returns r, g, and b in the set [0, 255].\n *\n * @return  Object           The RGB representation\n * @param h\n * @param s\n * @param v\n */\n\n\nglobal.hsvToRgb = function hsvToRgb(h, s, v) {\n  let r, g, b;\n  let i = Math.floor(h * 6);\n  let f = h * 6 - i;\n  let p = v * (1 - s);\n  let q = v * (1 - f * s);\n  let t = v * (1 - (1 - f) * s);\n\n  switch (i % 6) {\n    case 0:\n      r = v;\n      g = t;\n      b = p;\n      break;\n\n    case 1:\n      r = q;\n      g = v;\n      b = p;\n      break;\n\n    case 2:\n      r = p;\n      g = v;\n      b = t;\n      break;\n\n    case 3:\n      r = p;\n      g = q;\n      b = v;\n      break;\n\n    case 4:\n      r = t;\n      g = p;\n      b = v;\n      break;\n\n    case 5:\n      r = v;\n      g = p;\n      b = q;\n      break;\n  }\n\n  return {\n    r: r * 255,\n    g: g * 255,\n    b: b * 255\n  };\n};\n/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(/*! ./../../node_modules/webpack/buildin/global.js */ \"./node_modules/webpack/buildin/global.js\")))\n\n//# sourceURL=webpack:///./app/js/color.js?");

/***/ }),

/***/ "./app/js/data.js":
/*!************************!*\
  !*** ./app/js/data.js ***!
  \************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

eval("/* WEBPACK VAR INJECTION */(function(global) {// store hardware configs data\nglobal.CONFIG = {\n  mode: 0,\n  show: 0,\n  segment: 'a',\n  a: {\n    r: 255,\n    g: 0,\n    b: 0\n  },\n  b: {\n    r: 255,\n    g: 0,\n    b: 0\n  }\n}; // store audio configs for current show\n\nglobal.AUDIO = {\n  id: 0,\n  url: '',\n  filename: '',\n  duration: 0,\n  channels: 0,\n  sampleRate: 0,\n  tempo: 0,\n  beats: 0,\n  tracks: [],\n  color1: '#0000FF',\n  color2: '#FF0000',\n  ratio: 0.5,\n  swap: true\n};\nglobal.AUDIO_DEFAULT = Object.assign({}, AUDIO); // store light sequences for current show\n\nglobal.SHOWS = []; // store color data for current segment\n\nglobal.color = {\n  rgb: {\n    r: 255,\n    g: 0,\n    b: 0\n  },\n  hsl: {\n    h: 255,\n    s: 0,\n    l: 0\n  }\n};\n\nglobal.updateRGB = function updateRGB() {\n  const {\n    h,\n    s,\n    l\n  } = color.hsl;\n  color.rgb = hslToRgb(h, s, l);\n};\n\nglobal.updateHSL = function updateHSL() {\n  const {\n    r,\n    g,\n    b\n  } = color.rgb;\n  color.hsl = rgbToHsl(r, g, b);\n};\n\nupdateHSL();\nwindow.updateRGB = updateRGB;\n/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(/*! ./../../node_modules/webpack/buildin/global.js */ \"./node_modules/webpack/buildin/global.js\")))\n\n//# sourceURL=webpack:///./app/js/data.js?");

/***/ }),

/***/ "./app/js/events.js":
/*!**************************!*\
  !*** ./app/js/events.js ***!
  \**************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

eval("/* WEBPACK VAR INJECTION */(function(global) {global.handleError = function handleError() {\n  console.error(...arguments);\n};\n\nglobal.handleFile = function handleFile(file) {\n  return new Promise((resolve, reject) => {\n    console.debug('select file: ' + file.name);\n\n    if (file.name.endsWith('.lsf')) {\n      parseLSF(file).then(fetchData).then(resolve);\n    } else if (file.name.endsWith('.ipx')) {// parseIPX(file).then(resolve)\n    } else if (file.type.startsWith('audio')) {\n      stopShow().then(() => {\n        setAttr('#player', 'src', URL.createObjectURL(file));\n\n        if (!AUDIO || AUDIO.filename !== file.name) {\n          parseAudio(file).then(saveLightShow).then(resolve).then(startShow);\n        } else {\n          startShow().then(resolve);\n        }\n      });\n    } else {\n      console.error('unsupported file format');\n      reject('unsupported file format');\n    }\n  });\n};\n\nglobal.handleChange = function handleChange(e) {\n  if (e.type === 'change' && e.target.id === 'select-file') {\n    for (let file of e.target.files) {\n      handleFile(file);\n    }\n  } else if (e.target.matches('grid.color-slider input')) {\n    const channel = e.target.dataset.key;\n    const group = e.target.dataset.group;\n    color[group][channel] = parseFloat(e.target.value);\n\n    switch (group) {\n      case 'rgb':\n        updateHSL();\n        break;\n\n      case 'hsl':\n        updateRGB();\n        break;\n    }\n\n    renderColor();\n\n    if (e.type === 'change') {\n      post('/color', Object.assign({\n        segment: CONFIG.segment\n      }, color.rgb));\n    }\n  } else if (e.target.matches('input[data-group=\"audio\"]')) {\n    const {\n      key\n    } = e.target.dataset;\n    const value = e.target.value;\n\n    switch (e.target.type) {\n      case 'color':\n        AUDIO[key] = value;\n        break;\n\n      case 'range':\n        AUDIO[key] = parseFloat(value);\n        break;\n    }\n\n    if (e.type === 'change') {\n      console.info(`set ${key} = ${JSON.stringify(AUDIO[key])}`);\n    }\n  }\n};\n\nglobal.handleClick = function handleClick(e) {\n  if (e.target.dataset.segment) {\n    CONFIG.segment = e.target.dataset.segment;\n    color = {\n      rgb: CONFIG[CONFIG.segment]\n    };\n    updateHSL();\n    render();\n  } else if (e.target.dataset.show) {\n    CONFIG.show = parseInt(e.target.dataset.show) || 0;\n    render();\n    stopShow().then(() => {\n      post('/config', {\n        show: CONFIG.show\n      }).then(() => {\n        if (!CONFIG.show) startShow();else loadShowData().then(startShow);\n      });\n    });\n  } else if (e.target.dataset.action) {\n    const action = e.target.dataset.action;\n\n    switch (action) {\n      case 'show-file-select-dialog':\n        click('#select-file');\n        break;\n\n      case 'reset-show-data':\n        resetShow();\n        break;\n\n      case 'save-show-data':\n        saveShow();\n        break;\n\n      case 'toggle-prop':\n        const key = e.target.dataset.key;\n        AUDIO[key] = !AUDIO[key];\n        console.info(`set ${key} = ${AUDIO[key] ? 'on' : 'off'}`);\n        break;\n    }\n  } else if (e.target.dataset.command) {\n    const command = e.target.dataset.command;\n    sendCommand(command).then(() => {\n      switch (command) {\n        case 'start':\n          setProp('#player', 'currentTime', 0);\n          call('#player', 'play');\n          break;\n\n        case 'resume':\n          call('#player', 'play');\n          break;\n\n        case 'end':\n          call('#player', 'pause');\n          setProp('#player', 'currentTime', 0);\n          break;\n\n        case 'pause':\n          call('#player', 'pause');\n          break;\n      }\n    });\n  }\n};\n\nglobal.handleDragOver = function handleDragOver(e) {\n  e.preventDefault();\n};\n\nglobal.handleDragLeave = function handleDragLeave(e) {\n  e.preventDefault();\n};\n\nglobal.handleDragDrop = function handleDragDrop(e) {\n  e.preventDefault();\n\n  for (let file of e.dataTransfer.files) {\n    handleFile(file);\n  }\n};\n\nglobal.handleScroll = function handleScroll(e) {\n  if (e.target.closest('.timeline')) {\n    $('.timeline').forEach(el => {\n      if (el !== e.target) {\n        el.scrollLeft = e.target.scrollLeft;\n      }\n    });\n  }\n};\n\nglobal.handleInit = function handleInit() {\n  render();\n  fetchData();\n};\n\nwindow.addEventListener('scroll', handleScroll, true);\nwindow.addEventListener('dragover', handleDragOver, true);\nwindow.addEventListener('dragleave', handleDragLeave, true);\nwindow.addEventListener('drop', handleDragDrop, true);\nwindow.addEventListener('change', handleChange, true);\nwindow.addEventListener('input', handleChange, true);\nwindow.addEventListener('click', handleClick, true);\nwindow.addEventListener('touchstart', new Function(), true);\nwindow.addEventListener('load', handleInit);\n/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(/*! ./../../node_modules/webpack/buildin/global.js */ \"./node_modules/webpack/buildin/global.js\")))\n\n//# sourceURL=webpack:///./app/js/events.js?");

/***/ }),

/***/ "./app/js/index.js":
/*!*************************!*\
  !*** ./app/js/index.js ***!
  \*************************/
/*! no exports provided */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony import */ var _log_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./log.js */ \"./app/js/log.js\");\n/* harmony import */ var _log_js__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(_log_js__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var _lsf_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./lsf.js */ \"./app/js/lsf.js\");\n/* harmony import */ var _lsf_js__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(_lsf_js__WEBPACK_IMPORTED_MODULE_1__);\n/* harmony import */ var _color_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./color.js */ \"./app/js/color.js\");\n/* harmony import */ var _color_js__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(_color_js__WEBPACK_IMPORTED_MODULE_2__);\n/* harmony import */ var _data_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./data.js */ \"./app/js/data.js\");\n/* harmony import */ var _data_js__WEBPACK_IMPORTED_MODULE_3___default = /*#__PURE__*/__webpack_require__.n(_data_js__WEBPACK_IMPORTED_MODULE_3__);\n/* harmony import */ var _app_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./app.js */ \"./app/js/app.js\");\n/* harmony import */ var _app_js__WEBPACK_IMPORTED_MODULE_4___default = /*#__PURE__*/__webpack_require__.n(_app_js__WEBPACK_IMPORTED_MODULE_4__);\n/* harmony import */ var _api_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./api.js */ \"./app/js/api.js\");\n/* harmony import */ var _api_js__WEBPACK_IMPORTED_MODULE_5___default = /*#__PURE__*/__webpack_require__.n(_api_js__WEBPACK_IMPORTED_MODULE_5__);\n/* harmony import */ var _audio_js__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./audio.js */ \"./app/js/audio.js\");\n/* harmony import */ var _audio_js__WEBPACK_IMPORTED_MODULE_6___default = /*#__PURE__*/__webpack_require__.n(_audio_js__WEBPACK_IMPORTED_MODULE_6__);\n/* harmony import */ var _events_js__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ./events.js */ \"./app/js/events.js\");\n/* harmony import */ var _events_js__WEBPACK_IMPORTED_MODULE_7___default = /*#__PURE__*/__webpack_require__.n(_events_js__WEBPACK_IMPORTED_MODULE_7__);\n\n\n\n\n\n\n\n\n\n//# sourceURL=webpack:///./app/js/index.js?");

/***/ }),

/***/ "./app/js/log.js":
/*!***********************!*\
  !*** ./app/js/log.js ***!
  \***********************/
/*! no static exports found */
/***/ (function(module, exports) {

eval("document.head.innerHTML += `<style>\n\nx-console main {\n\tpadding: 0;\n\tmargin: 0;\n}\nx-console {\n\tz-index: 2000;\n\tdisplay: block;\n\tposition: fixed;\n\tbottom: 0;\n\tright: 0;\n\tleft: 0;\n\t\n\tbackground: #020202c9;\n\tborder: 10px solid #020202c9;\n\t\n\tbox-sizing: content-box;\n\tmax-height: 120px;\n\toverflow: auto;\n}\nx-console input,\nx-console output,\nx-console span {\n\tuser-select: text;\n\tfont-family: menlo;\n\tfont-size: 12px;\n\tline-height: 1.5em;\n}\nx-console input,\nx-console span {\n\theight: 1.5em;\n}\nx-console input,\nx-console output {\n\tdisplay: block;\n\tmargin: 0;\n\tpadding: 0;\n\tborder: none;\n\tbackground: none;\n\toutline: none;\n\twhite-space: pre !important;\n\tcolor: #fff;\n\ttext-align: left;\n}\nx-console line {\n\tdisplay: grid;\n\tgrid-template-columns: 20px auto;\n}\nx-console line span,\nx-console line output {\n\tcolor: lightgrey;\n}\nx-console line.debug * {\n\tcolor: lightgreen;\n}\nx-console line.info * {\n\tcolor: skyblue;\n}\nx-console line.warn * {\n\tcolor: yellow;\n}\nx-console line.error * {\n\tcolor: orangered;\n}\nx-console line.input * {\n\tcolor: white;\n}\nx-console line.input {\n\tdisplay: none;\n}\n</style>`;\n\nclass ConsoleElement {\n  constructor() {\n    this.el = document.createElement('x-console');\n    this.el.innerHTML = `\n\t\t<main></main>\n\t\t<line class=\"input\">\n\t\t\t<span>#</span>\n\t\t\t<input type=\"text\" />\n\t\t</line>\n\t\t`;\n    this.main = this.el.querySelector('main');\n    this.input = this.el.querySelector('input');\n    this.input.addEventListener('keydown', this.handleKeydown.bind(this));\n  }\n\n  handleKeydown(e) {\n    if (e.key === 'Enter') {\n      this.push('#', '', e.target.value);\n\n      try {\n        this.push('•', 'info', String(eval(e.target.value)));\n      } catch (err) {\n        this.push('•', 'error', err.stack);\n      }\n\n      e.target.value = '';\n      e.target.focus();\n    }\n  }\n\n  push(icon, type, ...args) {\n    const line = document.createElement('line');\n    type && line.classList.add(type);\n    line.innerHTML = `<span>${icon}</span><output></output>`;\n    const output = line.querySelector('output');\n    output.innerText = args.join(' ');\n    this.lastOutput = output;\n    this.main.appendChild(line);\n    this.el.scrollTop = this.el.scrollHeight;\n  }\n\n}\n\nconst logger = new ConsoleElement();\ndocument.body.appendChild(logger.el);\nconst original = {};\n\nfor (let key in console) {\n  original[key] = console[key];\n}\n\nwindow.console.log = (...args) => {\n  original.log(...args);\n  logger.push('•', 'log', ...args);\n};\n\nwindow.console.debug = (...args) => {\n  original.debug(...args);\n  logger.push('•', 'debug', ...args);\n};\n\nwindow.console.info = (...args) => {\n  original.info(...args);\n  logger.push('•', 'info', ...args);\n};\n\nwindow.console.warn = (...args) => {\n  original.warn(...args);\n  logger.push('•', 'warn', ...args);\n};\n\nwindow.console.error = (...args) => {\n  original.error(...args);\n  logger.push('•', 'error', ...args);\n};\n\nwindow.console.append = (...args) => {\n  if (logger.lastOutput) {\n    logger.lastOutput.innerHTML = `${logger.lastOutput.innerHTML}${args.join(' ')}`;\n  }\n};\n\n//# sourceURL=webpack:///./app/js/log.js?");

/***/ }),

/***/ "./app/js/lsf.js":
/*!***********************!*\
  !*** ./app/js/lsf.js ***!
  \***********************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

eval("/* WEBPACK VAR INJECTION */(function(global) {const setFrameRegex = /(\\t)?([0-9]+)ms: setrgb [AB]+ ([0-9]+)ms > ([0-9]+), ([0-9]+), ([0-9]+)/i;\nconst loopFrameRegex = /([0-9]+)ms: loop ([0-9]+)ms/i;\nconst endFrameRegex = /(\\t)?([0-9]+)ms: end/i;\n\nglobal.parseLSF = function parseLSF(file) {\n  const reader = new FileReader();\n  reader.readAsText(file);\n\n  reader.onload = () => {\n    const threads = reader.result.split(/@\\w+/g);\n\n    if (threads.length == 1) {\n      parseThread('A', threads[0]).then(() => parseThread('B', threads[0]));\n    } else if (threads.length == 3) {\n      parseThread('A', threads[1]).then(() => parseThread('B', threads[2]));\n    } else {\n      console.warn('Unknown data format', reader.result);\n    }\n  };\n\n  function parseThread(id, content) {\n    const frames = [];\n    let frame, lastFrame, buf, view;\n    content.split(/\\r|\\n|\\r\\n/).forEach(line => {\n      if (line.match(setFrameRegex)) {\n        let [, tab, start, transition, r, g, b] = line.match(setFrameRegex);\n        frame = {\n          type: 'rgb',\n          start,\n          duration: 0,\n          transition,\n          r,\n          g,\n          b\n        };\n\n        if (!tab) {\n          frames.push(frame);\n          lastFrame = frame;\n        } else {\n          lastFrame.frames.push(frame);\n        }\n      } else if (line.match(endFrameRegex)) {\n        let [, tab, start] = line.match(endFrameRegex);\n        frame = {\n          type: 'end',\n          start\n        };\n\n        if (!tab) {\n          frames.push(frame);\n          lastFrame = frame;\n        } else {\n          lastFrame.frames.push(frame);\n        }\n      } else if (line.match(loopFrameRegex)) {\n        let [, start, duration] = line.match(loopFrameRegex);\n        frame = {\n          type: 'loop',\n          start,\n          duration,\n          frames: []\n        };\n        lastFrame = frame;\n        frames.push(frame);\n      }\n    });\n    const lines = []; // const lines2 = []\n\n    function convert(frames, tab) {\n      frames.forEach((frame, index) => {\n        switch (frame.type) {\n          case 'rgb':\n            frame.duration = frames[index + 1].start - frame.start;\n            lines.push([tab ? '\tC' : 'C', frame.start, frame.duration, frame.transition, frame.r, frame.g, frame.b].join(' ')); // 01  00 00 00 00  00 00 00 00  00 00 00 00  00 00 00\n            // buf = new Uint8Array(16)\n            // view = new DataView(buf.buffer)\n            // view.setUint8(0, 0x01)\n            // view.setUint32(1, frame.start)\n            // view.setUint32(5, frame.duration)\n            // view.setUint32(9, frame.transition)\n            // view.setUint8(13, frame.r)\n            // view.setUint8(14, frame.g)\n            // view.setUint8(15, frame.b)\n            // lines2.push(buf)\n\n            break;\n\n          case 'loop':\n            lines.push(['L', frame.start, frame.duration].join(' ')); // 02   00 00 00 00  00 00 00 00\n            // buf = new Uint8Array(9)\n            // view = new DataView(buf.buffer)\n            // view.setUint8(0, 0x02)\n            // view.setUint32(1, frame.start)\n            // view.setUint32(5, frame.duration)\n\n            convert(frame.frames, true); // lines2.push(buf)\n\n            break;\n\n          case 'end':\n            lines.push([tab ? '\tE' : 'E', frame.start].join(' ')); // 03   00 00 00 00\n            // buf = new Uint8Array(5)\n            // view = new DataView(buf.buffer)\n            // view.setUint8(0, 0x03)\n            // view.setUint32(1, frame.start)\n            // lines2.push(buf)\n\n            break;\n        }\n      });\n    }\n\n    convert(frames);\n    console.log(lines.join('\\n'));\n    const path = `/show/${CONFIG.show}${id}.lsb`;\n    const blob = new Blob([lines.join('\\n')]); // const path = `/show/${getShow()}${id}.lsb`\n    // const blob = new Blob(lines2)\n\n    return uploadFile(path, blob);\n  }\n};\n/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(/*! ./../../node_modules/webpack/buildin/global.js */ \"./node_modules/webpack/buildin/global.js\")))\n\n//# sourceURL=webpack:///./app/js/lsf.js?");

/***/ }),

/***/ "./node_modules/webpack/buildin/global.js":
/*!***********************************!*\
  !*** (webpack)/buildin/global.js ***!
  \***********************************/
/*! no static exports found */
/***/ (function(module, exports) {

eval("var g; // This works in non-strict mode\n\ng = function () {\n  return this;\n}();\n\ntry {\n  // This works if eval is allowed (see CSP)\n  g = g || new Function(\"return this\")();\n} catch (e) {\n  // This works if the window reference is available\n  if (typeof window === \"object\") g = window;\n} // g can still be undefined, but nothing to do about it...\n// We return undefined, instead of nothing here, so it's\n// easier to handle this case. if(!global) { ...}\n\n\nmodule.exports = g;\n\n//# sourceURL=webpack:///(webpack)/buildin/global.js?");

/***/ })

/******/ });